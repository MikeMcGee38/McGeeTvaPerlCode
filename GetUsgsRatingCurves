#!/usr/bin/perl
#=========================================================================
#
# File: /apps/rfc/system/bin/GetUsgsRatingCurves
#
# Purpose: This script should be run once a day from ldm's crontab.
#          It uses an input file in ../data to get the list of USGS
#          gages for which it should download their ratings curve
#          data.  Data files are then transferred to FS1.
#
# Inputs:  /apps/rfc/system/data/rdbfiles
#            This directory contains the last files sent to the FEWS
#            FS server.  New files are compared to the previous
#            file and if there are no changes, the current file
#            is NOT sent to FEWS.
#          USGS web pages with stream stage/flow ratings values.
#
# Outputs: The script copies any new ratings files to the appropriate
#            directory on the appropriate FEWS FS1 server.
#          The script also copies any new or different ratings 
#            files to the RDB directory for storage.
#
# Developer: Mike McGee
#
# Updates:
#  1.0  10/30/2014  mpm  original code
#  2.0  05/18/2015  mpm  Per request from Nathan, only transfer to FEWS files
#                        that have changed.  A PREVIOUSFILESDIR has been
#                        created to hold a copied of files that are sent to
#                        FEWS.  Only files that are different from these
#                        originals are sent to FEWS.
#  2.1  08/12/2015  mpm  use encryption routines to determine samba login info
#  3.0  02/17/2016  mpm  switch to sftp to transfer files to FS1
#  3.1  04/14/2016  mpm  execute FEWS workflow after transferring files.
#  3.2  05/03/2016  mpm  read database name from DetermineEnvironment app.
#  3.3  06/14/2016  mpm  execute python script to run FEWS workflow
#  3.4  02/06/2017  mpm  new URL for accessing USGS ratings curves.
#  4.0  03/02/2017  mpm  convert from sftp to smbclient for file xfers.
#
#=========================================================================

use lib '/apps/rfc/system/lib';

# Include perl modules.
use TvaGeneralRoutines;
use UserIdsWithEncryption;
use File::Basename;
use File::Path;

use strict;

# All variables must be declared.
use strict;

# Determine the process ID of the script.
my $PROCESSID = $$;

# Determine and set the name of the script
my $SCRIPTNAME = basename( $0 );

# Determine operating environment.
my $TempString = `/apps/rfc/system/bin/DetermineEnvironment`;
my ( $SERVERTYPE, $FORECASTSHELLSERVER, $DBNAME ) = split /,/, $TempString;

# Define the smbclient variables. The samba service name for
# the FEWS FS1 server. All environments are the same except DEV.
my $SMBUSERID;
my $SMBUSERPASSWD;
my $SMBWORKGROUP;
GetKeyInfo( "FS1_$SERVERTYPE", \$SMBUSERID, \$SMBUSERPASSWD, \$SMBWORKGROUP );
my $FEWSSERVICENAME = "$FORECASTSHELLSERVER/Fews";
if ( $SERVERTYPE =~ "DEV" ) {
  $FEWSSERVICENAME .= "_DEV";
} # end if
my $SMBCLIENTPROGRAM = "/usr/bin/smbclient";

# Declare server directory where files will be copied.
my $FEWSREMOTEDIR = "data/$DBNAME/Import/ratingsPreprocessorRDB";

# Define the directory where previous files will be saved.
# This directory stores the last file sent to the FEWS server
# and is used to determine if the current file is new data.
my $PREVIOUSRDBFILES = "/apps/rfc/system/data/rdbfiles";
my $LOCALTEMPDIR     = "/apps/rfc/system/data/ratingscurves";
my $LOGFILENAME      = "/apps/rfc/system/logs/" .
                       "GetUsgsRatingCurves.log";
my $USGSGAGEIDS      = "/apps/rfc/system/data/" .
                       "USGS_RatingCurve_Locations.dat";

# How many files need to be transferred.
my $NUMBERFILESTRANSFERRED = 0;

# Define the work flow command to be run when new data is transferred.
my $WORKFLOWCOMMAND = "/apps/rfc/system/bin/execute_workflow_linux.py " .
                      "-workflow=ImportRatings";

############################################################################
# 
############################################################################

sub GetDataOffWeb {

  my ( $GageID, $CommandString, $Status,
       $UrlString, $OutputFilename, $FileSize, $FileCount,
     );

  # Make sure the input file exists.  If not, abort the script.
  unless ( -e $USGSGAGEIDS ) {
    LogEntry( "input file $USGSGAGEIDS does not exist, aborting script" );
    print "Input file $USGSGAGEIDS does not exist, aborting script\n";
    exit;
  }

  # Open the file containing the list of USGS gage IDs.
  open( FH1, "<$USGSGAGEIDS" );

  # Skip the first line of the file, header info.
  $GageID = <FH1>;

  # Read each remaining line in the file as a gage ID.
  $FileCount = 0;
  while ( $GageID = <FH1> ) {
    
    # Strip any blanks and the trailing carriage return.
    chomp $GageID;
    $GageID = Trim( $GageID );

    # Skip any lines that begin with a pound sign (#).
    next if ( $GageID =~ /^#/ );

    # Build the URL for the ratings curve data.
    $UrlString = "https://waterdata.usgs.gov/nwisweb/data/" .
                 "ratings/exsa/USGS." . $GageID .
                 ".exsa.rdb";

    # Build the wget command to retrieve the data.
    $OutputFilename = "${LOCALTEMPDIR}/${GageID}.rdb";
    $CommandString  = "wget --no-check-certificate " .
                      "-O $OutputFilename $UrlString";

    # Execute the command.
    $Status = `$CommandString 2>/dev/null`;

    # Make sure data was found for gage.
    $FileSize = ( stat( $OutputFilename ))[7];
    if ( $FileSize < 100 ) {
      # Delete the output file since it contains no data.
      unlink $OutputFilename;
      print "No data found for gage ID $GageID\n";
    } else {

      # Valid data found, increment file count.
      $FileCount++;
    }

  }

  # Close the input file.
  close FH1;

  return;

} # End GetDataOffWeb


############################################################################
# 
############################################################################

sub RemoveSameRdbFiles {

  my ( $CommandString, $Status,
       $Base, $Path, $FileExtension,
       $PreviousFilename, $TransferFile,
     );

  # Loop thru each file in the temporary directory.
  while ( my $Filename = <$LOCALTEMPDIR/*.rdb> ) {

    # Assume the new file does NOT need to be transferred.
    $TransferFile = 0;

    # Determine the file base, path and extension.
    ( $Base, $Path, $FileExtension ) = fileparse( $Filename, '\..*' );

    # Determine the fully qualified name of the RDB file 
    # in the previous files directory.
    $PreviousFilename = "$PREVIOUSRDBFILES/$Base$FileExtension";

    # If the previous file does not exist, the current file
    # needs to be transferred.
    unless ( -e $PreviousFilename ) {

      # New RDB file to be transferred.
      $TransferFile = 1;

    } else {

      # Is the new file identical to the previous RDB file sent to FEWS.
      $CommandString = "diff --brief $Filename $PreviousFilename";
      $Status        = `$CommandString`;
      chomp $Status;

      # If the message returned from the diff command is not blank, 
      # the current file is different and needs to be transferred.
      unless ( length $Status == 0 ) {

        # New RDB file to be transferred.
        $TransferFile = 1;

      } # end unless

    } # end unless

    # If TransferFile is zero, delete the file from the temp directory.
    unless ( $TransferFile ) {

      # The current file and the previous file are the same.
      # Delete the file from the temp directory.
      unlink $Filename;

    } else {

      # Increment the FileCount variable.
      $NUMBERFILESTRANSFERRED++;

    } # end if

  } # end while

  return;

} # end RemoveSameRdbFiles


############################################################################
# 
############################################################################

sub TransferFilesToFews {

  my ( $CommandString, $Status,
     );

  # If files need to be transferred, execute the smbclient command 
  # to copy the rdb files.
  if ( $NUMBERFILESTRANSFERRED > 0 ) {

    # Build the samba command to copy the file to FEWS
    $CommandString = "$SMBCLIENTPROGRAM //$FEWSSERVICENAME " .
                     "-W $SMBWORKGROUP -U $SMBUSERID%$SMBUSERPASSWD " .
                     "-c \"cd $FEWSREMOTEDIR; " .
                     "lcd $LOCALTEMPDIR; " .
                     "prompt; mput *.rdb\"";

    $Status = `$CommandString`;

    # Execute the FEWS workflow to import the files.
    $Status = `$WORKFLOWCOMMAND`;

  } # end if


  # Save a message to the log file.
  LogEntry( "$NUMBERFILESTRANSFERRED RDB files copied to FEWS" );

  return;

} # End TransferFilesToFews


############################################################################
# 
############################################################################

sub SaveNewFiles {

  my ( $CommandString, $Status, $Filename,
     );

  # If files were transferred, save the new files to the RDB directory.
  if ( $NUMBERFILESTRANSFERRED > 0 ) {

    # Loop thru each file in the temporary directory.
    while ( $Filename = <$LOCALTEMPDIR/*.rdb> ) {

      # Build the command to copy the current file to the RDB directory.
      $CommandString = "cp $Filename $PREVIOUSRDBFILES";
      $Status        = `$CommandString`;

    } # end while

  } # end if

  return;

} # end SaveNewFiles


############################################################################
#
############################################################################

sub LogEntry {

  my ( $Message ) = @_;

  my ( $DateTimeString,
     );

  # Open the log file for writing.
  open( LFH, ">>$LOGFILENAME" );

  # Determine the date/time and save the message to the log file.
  $DateTimeString = `date '+%D %T'`;
  chomp $DateTimeString;
  print LFH "$DateTimeString - $Message\n";

  # Close the log file.
  close LFH;

  return;

} # End LogEntry

 
########################################################################
# 
########################################################################

sub Main {

  my ( $CommandString, $Status,
     );

  # Make sure the local temp directory exists.
  unless ( -e $LOCALTEMPDIR ) {
    mkdir $LOCALTEMPDIR, 0777;
  }

  # Make sure the directory for previous RDB files exists.
  unless ( -e $PREVIOUSRDBFILES ) {
    mkdir $PREVIOUSRDBFILES, 0777;
  }

  # Clear the local temp directory.
  $CommandString = "rm -f $LOCALTEMPDIR/*";
  $Status        = `$CommandString`;

  # Download the ratings curve data files off the web.
  GetDataOffWeb();

  # Remove files from temp directory that don't need to be 
  # copied to FEWS.
  RemoveSameRdbFiles();

  # Copy new files to the FEWS server.
  TransferFilesToFews();
 
  # Save the new files to the previous RDB files directory.
  SaveNewFiles();

  # Clear the local temp directory.
###  $Command = "rm -f $LOCALTEMPDIR/*";
###  $Status = `$Command`;

  return;

} # End Main

########################################################################
# 
########################################################################

# Call the Main routine.
Main();
