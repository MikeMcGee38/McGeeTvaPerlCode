#!/usr/bin/perl
#=========================================================================
#
# File: /apps/rfc/system/bin/MoveWpcQpfFiles
#
# Purpose: Script to move GRB files from WPC ftp server.
#
# Inputs:  
#
# Outputs: 
#
# Developer: Mike McGee
#
# Updates:
#  1.0  02/02/2018  mpm  original code
#
#==###===================================================================

use lib '/apps/rfc/system/lib';

# Specify perl modules to load.
use TvaGeneralRoutines;
use UserIdsWithEncryption;
use File::Basename;
use File::Path;

use strict;

# Determine the process ID of the script.
my $PROCESSID = $$;

# Determine and set the name of the script
my $SCRIPTNAME = basename( $0 );

# Determine operating environment.
my $TempString = `/apps/rfc/system/bin/DetermineEnvironment`;
my ( $SERVERTYPE, $FORECASTSHELLSERVER, $DBNAME ) = split /,/, $TempString;

# Define the smbclient variables. The samba service name for
# the FEWS FS1 server. All environments are the same except DEV.
my $SMBUSERID;
my $SMBUSERPASSWD;
my $SMBWORKGROUP;
GetKeyInfo( "FS1_$SERVERTYPE", \$SMBUSERID, \$SMBUSERPASSWD, \$SMBWORKGROUP );
my $FEWSSERVICENAME = "$FORECASTSHELLSERVER/Fews";
if ( $SERVERTYPE =~ "DEV" ) {
  $FEWSSERVICENAME .= "_DEV";
} # end if
my $SMBCLIENTPROGRAM = "/usr/bin/smbclient";

# Declare server directory where files will be copied.
my $FEWSREMOTEDIR = "data/$DBNAME/Import/QPF/MostLikely/WPC";

# Define the work flow command to be run when new data is transferred.
my $WORKFLOWCOMMAND = "/apps/rfc/system/bin/execute_workflow_linux.py " .
                      "-workflow=ImportLMRFC_QPF";

# Define the server dependent globals
my $EXTERNALFTPURL    = "ftp://ftp.wpc.ncep.noaa.gov/2p5km_qpf";
my $EXTERNALFTPUSERID = "anonymous";

# Define the local temporary directory used to hold files.
my $LOCALTEMPDIR = "/tmp/wpc";
my $ARCHIVEDIR   = "$LOCALTEMPDIR/archive";

# Define the location and name of the log file.
my $LOGFILENAME = "/apps/rfc/system/logs/MoveWpcQpfFiles.log";

###############################################################################
#
# Verify that the temporary data file directory exists and is empty.
#
###############################################################################

sub VerifyTempDirectory {

  my ( $CommandString, $Status,
     );

  # If the local directory does not exist, create it.
  unless ( -e $LOCALTEMPDIR) {
    mkdir $LOCALTEMPDIR;
    chmod 0777, $LOCALTEMPDIR;
  }
  unless ( -e $ARCHIVEDIR) {
    mkdir $ARCHIVEDIR;
    chmod 0777, $ARCHIVEDIR;
  }

  # Delete any files off the local directory.
  $CommandString = "rm -f $LOCALTEMPDIR/*.grb";
  $Status = `$CommandString`;

} # end VerifyTempDirectory

########################################################################
#
########################################################################

sub GetCorpFilesFromFtpServer {

  my ( $CommandString, $Status,
       $CurrentYear, $CurrentMonth, $CurrentDay,
       $TestYear, $TestMonth, $TestDay,
       $TransferFilename, $FileCount, $FileList,
       $Base, $Path, $Extension,
       $TestFileName,
     );

  # Determine the current date.
  ( $CurrentYear, $CurrentMonth, $CurrentDay ) = Today();

  # Check the current and previous days for the latest files.
  for ( my $i=0; $i<=1; $i++ ) {

    # Determine the test date.
    ( $TestYear, $TestMonth, $TestDay ) = 
      Add_Delta_Days( $CurrentYear, $CurrentMonth, $CurrentDay, -$i );

    # Check for each of the time period for which forecasts are issued.
    foreach my $Forecast ( 18, 12, 6, 0 ) {

      # Build the filename test string.
      $TransferFilename = sprintf "p06m_%04d%02d%02d%02d*.grb",
                                  $TestYear, $TestMonth, $TestDay,
                                  $Forecast;

      # Build the command to transfer any available files.
      $CommandString = "wget -q -P $LOCALTEMPDIR " .
                       "--ftp-user=$EXTERNALFTPUSERID " .
                       "$EXTERNALFTPURL/$TransferFilename";

      # Execute the command.
      $Status = `$CommandString`;

      # Determine if any files were copied.
      $CommandString = "ls -1 $LOCALTEMPDIR/*.grb 2>/dev/null | wc -l";
      $FileCount = `$CommandString`;
      chomp $FileCount;

      # If the file count is greater than zero, see if any of the
      # files are new.
      if ( $FileCount > 0 ) {

        # Create a list of all files in the temp directory.
        $CommandString = "ls $LOCALTEMPDIR/*.grb";
        $FileList      = `$CommandString`;

        # Determine if there are any new files.
        foreach my $FileName ( split /\n/, $FileList ) {

          # Determine if the file exists in the archive area.  If so,
          # delete the file in the temp dir.
          ( $Base, $Path, $Extension ) = fileparse( $FileName, '\..*' );

          $TestFileName = "$ARCHIVEDIR/$Base$Extension";
          if ( -e $TestFileName ) {

            # The file exists in the archive area so it has already
            # been sent to the FEWS servers.  Delete the file.
            unlink $FileName;

          } # end if

        } # end foreach

        # All already processed files in the temp directory have been
        # deleted.  Determine if there are still files to be copied to
        # the FEWS servers.
        $CommandString = "ls -1 $LOCALTEMPDIR/*.grb 2>/dev/null | wc -l";
        $FileCount = `$CommandString`;
        chomp $FileCount;

        # Return the number of files found.
        return $FileCount;
  
      } # end if

    } # end foreach

  } # end for

  # The only way this point can be reached is if there are not GRB
  # files for the current and previous days.  If that is the case,
  # return a zero to indicate that no files need to be sent to FEWS.
  return 0;

} # End GetCorpFilesFromFtpServer


########################################################################
#
########################################################################

sub CopyGrbToFews {

  my ( $CommandString, $Status, $DateTimeString,
     );


  # Determine the date/time string for use below in
  # renaming the flowsheet files.
  $DateTimeString = CurrentTVADateTime( 5 );
 
  # Copy any files in the local temp dir to FEWS.
  # Use samba to copy the file to FEWS.
  $CommandString = "$SMBCLIENTPROGRAM //$FEWSSERVICENAME " .
                   "-W $SMBWORKGROUP -U $SMBUSERID%$SMBUSERPASSWD " .
                   "-c \"cd $FEWSREMOTEDIR; " .
                   "lcd $LOCALTEMPDIR; " .
                   "prompt; mput *.grb\"";
  $Status        = `$CommandString`;

  return;

} # End CopyGrbToFews


#####################################################################
#
# Procedure for cleaning the archive directory.
#
#####################################################################

sub CleanArchiveDirectory {

  my ( $MaxAgeInDays, $MaxAgeInSeconds,
       $CurrentDateInSeconds, $CreateDateInSeconds,
       $FileAgeInSeconds, $FilesDeleted,
     );

  # Delete "old" files from the archive directory.
  $MaxAgeInDays = 3;
  $MaxAgeInSeconds = $MaxAgeInDays * 24 * 60 * 60;

  # Determine the current date, in seconds.
  $CurrentDateInSeconds = `date +%s`;

  # Set the number of files deleted to zero.
  $FilesDeleted = 0;
  while ( my $FileName = <$ARCHIVEDIR/*> ) {

    # Determine the file creation date.
    $CreateDateInSeconds = (stat $FileName)[9];
    $FileAgeInSeconds = $CurrentDateInSeconds-$CreateDateInSeconds;
    # Determine if the file is too old.
    if ( $FileAgeInSeconds > $MaxAgeInSeconds ) {

      # Delete the old file.
      unlink $FileName;
      $FilesDeleted += 1;

    } # end if

  } # end while

  # Determine if any files were deleted from the archive directory.
  # If so, save a message to the log file.
  if ( $FilesDeleted > 0 ) {

    # Log that the files cleaned from the archive directory.
    LogEntry( "$FilesDeleted deleted from archive directory" );

  } # end if

} # end CleanArchiveDirectory


########################################################################
#
########################################################################

sub LogEntry {

  my ( $Message ) = @_;

  my ( $DateTimeString,
     );

  # Open the log file for writing.
  open( LFH, ">>$LOGFILENAME" );

  # Determine the date/time and save the message to the log file.
  $DateTimeString = CurrentTVADateTime( 7 );
  print LFH "$DateTimeString - $Message\n";

  # Close the log file.
  close LFH;

  return;

} # End LogEntry

########################################################################
# 
########################################################################

sub Main {

  my ( $CommandString, $Status, $FileCount,
     );

  # Make sure the local temp and archive directories exists.
  VerifyTempDirectory();

  # Copy file from the external server.
  $FileCount = GetCorpFilesFromFtpServer();

  # If new files were found, copy the files to FEWS, run the 
  # appropriate workflow and archive the files.
  if ( $FileCount > 0 ) {

    # If a one was returned, files need to be sent to FEWS and 
    # moved to the archive directory.
    CopyGrbToFews();

    # Execute the FEWS workflow to import the file.
    $Status = `$WORKFLOWCOMMAND`;

    # Move the GRB files from the temp directory to the 
    # archive directory.
    $CommandString = "mv $LOCALTEMPDIR/*.grb $ARCHIVEDIR";
    $Status        = `$CommandString`;

    # Log a status message.
    LogEntry( "$FileCount new WPC QPF files copied to FEWS" );

  } else {

    # Log a status message.
    LogEntry( "No new files to copy to FEWS" );

  } # end if

  # Delete "old" files in the archive area.
  CleanArchiveDirectory();

  return;

} # End Main

########################################################################
# 
########################################################################

# Call the Main routine.
Main();
