#!/usr/bin/perl
#=========================================================================
#
# File: /apps/rfc/system/bin/MoveCorpFiles
#
# Purpose: Script to move USACE files from hancock to FEWS server.
#
# Inputs:  
#
# Outputs: 
#
# Developer: Mike McGee
#
# Updates:
#  1.0  01/02/2015  mpm  original code
#  2.0  05/27/2015  mpm  For the files sent to FEWS, change the format
#                          of the filenames.
#  3.0  02/17/2016  mpm  switch to sftp to transfer files to FS1
#  3.1  04/14/2016  mpm  execute FEWS workflow after transferring files
#  3.2  05/03/2016  mpm  read database name from DetermineEnvironment app.
#  3.3  06/14/2016  mpm  execute python script to run FEWS workflow
#  3.4  07/26/2016  mpm  copy the COERR2LRN file from hancock to FS1.
#  3.5  08/11/2016  mpm  only send files to FEWS when they change.
#  3.6  12/14/2016  mpm  remove copy of LRN_Flowsheet.txt file.
#  4.0  03/08/2017  mpm  convert from sftp to smbclient for file xfers.
#
#==###===================================================================

use lib '/apps/rfc/system/lib';

# Specify perl modules to load.
use TvaGeneralRoutines;
use UserIdsWithEncryption;
use File::Basename;
use File::Path;

use strict;

# Determine the process ID of the script.
my $PROCESSID = $$;

# Determine and set the name of the script
my $SCRIPTNAME = basename( $0 );

# Determine operating environment.
my $TempString = `/apps/rfc/system/bin/DetermineEnvironment`;
my ( $SERVERTYPE, $FORECASTSHELLSERVER, $DBNAME ) = split /,/, $TempString;

# Define the smbclient variables. The samba service name for
# the FEWS FS1 server. All environments are the same except DEV.
my $SMBUSERID;
my $SMBUSERPASSWD;
my $SMBWORKGROUP;
GetKeyInfo( "FS1_$SERVERTYPE", \$SMBUSERID, \$SMBUSERPASSWD, \$SMBWORKGROUP );
my $FEWSSERVICENAME = "$FORECASTSHELLSERVER/Fews";
if ( $SERVERTYPE =~ "DEV" ) {
  $FEWSSERVICENAME .= "_DEV";
} # end if
my $SMBCLIENTPROGRAM = "/usr/bin/smbclient";

# Declare server directory where files will be copied.
my $FEWSREMOTEDIR = "data/$DBNAME/Import/USACE";

# Define the work flow command to be run when new data is transferred.
my $WORKFLOWCOMMAND = "/apps/rfc/system/bin/execute_workflow_linux.py " .
                      "-workflow=ImportCumberlandFlowsheet";

# Define the server dependent globals
my $EXTERNALSERVER    = "hancock.tva.gov";
my $EXTERNALUSERID    = "ldm";
my $EXTERNALDIRECTORY = "/home/ldm/incoming/usace";

# Define the name of the flowsheet file.
my $FLOWSHEETFILENAME = "COERR2LRN";

# Define the local temporary directory used to hold files.
my $LOCALTEMPDIR          = "/tmp/usace";
my $LOCALARCHIVEDIR       = "$LOCALTEMPDIR/archive";

# Define the location and name of the log file.
my $LOGFILENAME = "/apps/rfc/system/logs/MoveCorpFiles.log";

########################################################################
#
########################################################################

sub GetCorpFilesFromHancock {

  my ( $CommandString, $Status,
     );

  # Create the command to copy the Corp flowsheet.
  $CommandString = "scp $EXTERNALUSERID\@$EXTERNALSERVER:" .
                   "$EXTERNALDIRECTORY/$FLOWSHEETFILENAME $LOCALTEMPDIR";

  # Execute the command.
  $Status = `$CommandString`;

  return;

} # End GetCorpFilesFromHancock

########################################################################
#
########################################################################

sub NewFilesToTransfer {

  my ( $TempFile1, $TempFile2,
       $CommandString, $Status, $ReturnValue,
     );

  # Assume there are no files to be transferred.
  $ReturnValue = 0;

  # Check each Corp file to determine if it's changed.
  foreach my $TestFilename ( $FLOWSHEETFILENAME ) {

    # Build the filenames of the 2 files to test.
    $TempFile1 = "$LOCALTEMPDIR/$TestFilename";
    $TempFile2 = "$LOCALARCHIVEDIR/$TestFilename";

    # If the archive file does not exist, assume the current
    # file needs to be transferred.
    if ( -e $TempFile2 ) {

      # Is the new file identical to the previous RDB file sent to FEWS.
      $CommandString = "diff --brief $TempFile1 $TempFile2";
      $Status        = `$CommandString`;
      chomp $Status;

      # If the files are the same, Status will be zero.
      # files will be transferred to FEWS.
      if ( length $Status == 0 ) {

        # No need to transfer the current file.  Delete it.
        $CommandString = "rm $TempFile1";
        $Status        = `$CommandString`;

      } else {

        # Files are different so keep the file in the temp
        # directory and set the return value to one.
        $ReturnValue = 1;

      } # end if

    } else {

      # File does not exist in the archive so it must be transferred.
      $ReturnValue = 1;

    } # end if

  } # end foreach

  return $ReturnValue;

} # End NewFilesToTransfer

########################################################################
#
########################################################################

sub CopyFlowsheetToFews {

  my ( $CommandString, $Status, $DateTimeString,
     );


  # Determine the date/time string for use below in
  # renaming the flowsheet files.
  $DateTimeString = CurrentTVADateTime( 5 );
 
  # Save a copy of the file in the archive area using the original
  # name.  This file is needed for testing future files.  Also
  # save a copy of the file with tha date/time appended.
  $CommandString = "cp $LOCALTEMPDIR/$FLOWSHEETFILENAME $LOCALARCHIVEDIR";
  $Status        = `$CommandString`;

  $CommandString = "cp $LOCALTEMPDIR/$FLOWSHEETFILENAME " .
                   "$LOCALARCHIVEDIR/$FLOWSHEETFILENAME.$DateTimeString";
  $Status        = `$CommandString`;

  # Rename the flow sheet file to the FEWS name.
  $CommandString = "mv $LOCALTEMPDIR/$FLOWSHEETFILENAME " .
                   "$LOCALTEMPDIR/RFC_CumberlandProjectsForecast_" .
                   "USACE_${DateTimeString}.txt";
  $Status        = `$CommandString`;

  # Use samba to copy the file to FEWS.
  $CommandString = "$SMBCLIENTPROGRAM //$FEWSSERVICENAME " .
                   "-W $SMBWORKGROUP -U $SMBUSERID%$SMBUSERPASSWD " .
                   "-c \"cd $FEWSREMOTEDIR; " .
                   "lcd $LOCALTEMPDIR; " .
                   "prompt; mput *.txt\"";
  $Status        = `$CommandString`;

  return;

} # End CopyFlowsheetToFews


########################################################################
#
########################################################################

sub LogEntry {

  my ( $Message ) = @_;

  my ( $DateTimeString,
     );

  # Open the log file for writing.
  open( LFH, ">>$LOGFILENAME" );

  # Determine the date/time and save the message to the log file.
  $DateTimeString = CurrentTVADateTime( 7 );
  print LFH "$DateTimeString - $Message\n";

  # Close the log file.
  close LFH;

  return;

} # End LogEntry

########################################################################
# 
########################################################################

sub Main {

  my ( $Command, $Status, $FileCount,
     );

  # Make sure the local temp and archive directories exists.
  unless ( -e $LOCALTEMPDIR ) {
    mkdir $LOCALTEMPDIR;
  } # end unless
  unless ( -e $LOCALARCHIVEDIR ) {
    mkdir $LOCALARCHIVEDIR;
  } # end unless

  # Clear the local temp directory.
  $Command = "rm $LOCALTEMPDIR/*";
  $Status  = `$Command`;

  # Copy file from the external server.
  GetCorpFilesFromHancock();

  # Determine if the file is different from the last
  # file sent.
  if ( NewFilesToTransfer() ) {

    # Copy the flowsheet to the forecast shell.
    CopyFlowsheetToFews();

    # Execute the FEWS workflow to import the file.
    $Status = `$WORKFLOWCOMMAND`;

    # Log a status message.
    LogEntry( "New USCORP flow sheet file copied to FEWS" );

  } else {

    # Log a status message.
    LogEntry( "No new file to copy to FEWS" );

  } # end if

  return;

} # End Main

########################################################################
# 
########################################################################

# Call the Main routine.
Main();
